{"version":3,"sources":["../../src/utils/camelize.ts","../../src/utils/capitalize.ts","../../src/utils/kebabize.ts","App.js","../../src/hook/useBemCss.ts","index.js"],"names":["string","App","useBemCss","className","blocks","elements","button","buttonInput","buttonLabel","buttonSpan","type","ReactDOM","render","document","getElementById"],"mappings":"4KAAa,G,KAAW,SAACA,GACvB,SAAO,OAAO,QAAQ,OAAO,SAAC,GAAU,SAAM,cAAN,QCD7B,EAAa,SAAC,GACzB,SAAO,OAAO,OAAO,GAAG,cAAgB,EAAO,MAAM,ICD1C,EAAW,SAAC,GACvB,IAAM,EAAmB,GAqBzB,OAnBA,EACG,OACA,MAAM,IACN,SAAQ,SAAC,EAAgB,GACxB,GAAc,IAAV,EAKJ,OAAI,EAAO,gBAAkB,GAC3B,EAAO,KAAK,UACZ,EAAO,KAAK,EAAO,qBAIrB,EAAO,KAAK,GAVV,EAAO,KAAK,MAcX,EAAO,KAAK,IAAI,oBAAoB,QAAQ,MAAM,MCD5CC,EAlBH,WACV,MCgBuB,SAA2C,G,IAClE,EAAS,YACT,EAAW,SAAX,OAAS,SAAE,EACX,oBAAQ,MAAG,GAAE,EACb,qBAAY,SAAE,EAOR,EAAoC,GAE1C,EAAO,SAAQ,SAAC,GAOd,IAAM,EAAa,EAAS,GACtB,EAAW,EAAU,cAEtB,EAAQ,KACX,EAAQ,GAAY,IAGtB,EAAQ,GAAU,KAAK,GAOnB,IAAY,8BAAU,QAAS,GACjC,EAAS,SAAQ,SAAC,GAChB,IAAM,EAAa,EAAW,EAAS,EAAQ,gBACzC,EAAe,EAAS,GAEzB,EAAQ,UAAG,GAAW,aACzB,EAAQ,UAAG,GAAQ,OAAG,IAAgB,IAGxC,EAAQ,GAAG,UAAW,WAAc,KAAK,UAAG,EAAU,aAAK,UAY7D,GAAa,EAAU,OAAS,GAClC,EAAU,SAAQ,SAAC,GAAE,MAAQ,WAAE,EAAQ,WAAE,EAAO,UAC9C,GAAI,EAAU,CACZ,IAAM,EAAgB,EAAS,GAE/B,IAAK,GAAW,EAAQ,QAAU,EACnB,OAAO,KAAK,GAEpB,SAAQ,SAAC,GACZ,EAAQ,GAAK,SAAQ,SAAC,GACpB,EAAQ,GAAK,KAAK,GAAG,SAAS,4BAIlC,EAAQ,SAAQ,SAAC,GACf,IAAM,EAAgB,EAAS,cAE3B,EAAQ,IACV,EAAQ,GAAe,SAAQ,SAAC,GAC9B,EAAQ,GAAe,KAAK,GAAG,SAAS,oBAI5C,IAAM,EAAW,EAAU,cACrB,EAAa,EAAW,EAAS,EAAS,gBAC1C,EAAkB,UAAG,GAAW,UAElC,EAAQ,IACV,EAAQ,GAAiB,SAAQ,SAAC,GAChC,EAAQ,GAAiB,KAAK,GAAG,SAAS,2BAaxD,IAAM,EAAS,GAMf,OAJA,OAAO,KAAK,GAAS,SAAQ,SAAC,GAC5B,EAAO,GAAO,EAAQ,GAAK,KAAK,QAG3B,EDvHkDC,CAAU,CACjEC,UAAW,SACXC,OAAQ,CAAC,UACTC,SAAU,CAAC,QAAS,QAAS,UAHvBC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,YAAaC,EAA7B,EAA6BA,YAAaC,EAA1C,EAA0CA,WAM1C,OACE,yBAAKN,UAAWG,GACd,2BAAOH,UAAWK,GAChB,0BAAML,UAAWM,GAAjB,cACA,4BAAQC,KAAK,SAASP,UAAWI,GAAjC,WERRI,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.440aa177.chunk.js","sourcesContent":["var camelize = function (string) {\n    return string.trim().replace(/-./g, function (match) { return match.toUpperCase()[1]; });\n};\n\nvar capitalize = function (string) {\n    return string.trim().charAt(0).toUpperCase() + string.slice(1);\n};\n\nvar kebabize = function (str) {\n    var result = [];\n    str\n        .trim()\n        .split(\"\")\n        .forEach(function (letter, index) {\n        if (index === 0) {\n            result.push(letter);\n            return undefined;\n        }\n        if (letter.toUpperCase() === letter) {\n            result.push(\"-\");\n            result.push(letter.toLowerCase());\n            return undefined;\n        }\n        result.push(letter);\n        return undefined;\n    });\n    return result.join(\"\").toLocaleLowerCase().replace(/--/g, '-');\n};\n\nvar useBemCss = function (_a) {\n    var className = _a.className, _b = _a.blocks, blocks = _b === void 0 ? [] : _b, _c = _a.elements, elements = _c === void 0 ? [] : _c, _d = _a.modifiers, modifiers = _d === void 0 ? [] : _d;\n    /**\n     * This is an empty object to be used as unrestricted to update and create all the classes\n     * This object will also holds the values already in kebab-case version\n     * This object keys will be in camelCase\n     */\n    var prepare = {};\n    blocks.forEach(function (block) {\n        /**\n         * Will create the base blocks and add on the className\n         * If there is multiple blocks it will create multiple entries\n         * The key will be camelCase (all lowered)\n         * The value will be kebab-case\n         */\n        var blockValue = kebabize(block);\n        var blockKey = className.toLowerCase();\n        if (!prepare[blockKey]) {\n            prepare[blockKey] = [];\n        }\n        prepare[blockKey].push(blockValue);\n        /**\n         * If there is elements it will generate all the elements\n         * The key will be a combination of the `classname` lowered with the `element` also lowered\n         * The value will be a BEM styled value of a `classname__element`\n         */\n        if (elements && (elements === null || elements === void 0 ? void 0 : elements.length) > 0) {\n            elements.forEach(function (element) {\n                var elementKey = capitalize(camelize(element.toLowerCase()));\n                var elementValue = kebabize(element);\n                if (!prepare[\"\".concat(blockKey).concat(elementKey)]) {\n                    prepare[\"\".concat(blockKey).concat(elementKey)] = [];\n                }\n                prepare[\"\".concat(blockKey).concat(elementKey)].push(\"\".concat(blockValue, \"__\").concat(elementValue));\n            });\n        }\n    });\n    /**\n     * If there is modifier it will check and does not have an affect list, it will affect every entry\n     * otherwise it will only affects the selected items on the affect string list\n     * Also it needs to be active to affects the elements, the default is not affect anything\n     * Once it affects it will update the affected block or element adding the BEM styled appended value\n     * Like: `block--modifier` or `block__element--modifier`\n     */\n    if (modifiers && modifiers.length > 0) {\n        modifiers.forEach(function (_a) {\n            var modifier = _a.modifier, isActive = _a.isActive, affects = _a.affects;\n            if (isActive) {\n                var modifierValue_1 = kebabize(modifier);\n                if (!affects || affects.length <= 0) {\n                    var keys = Object.keys(prepare);\n                    keys.forEach(function (key) {\n                        prepare[key].forEach(function (item) {\n                            prepare[key].push(\"\".concat(item, \"--\").concat(modifierValue_1));\n                        });\n                    });\n                }\n                else {\n                    affects.forEach(function (affected) {\n                        var affectedBlock = affected.toLowerCase();\n                        if (prepare[affectedBlock]) {\n                            prepare[affectedBlock].forEach(function (item) {\n                                prepare[affectedBlock].push(\"\".concat(item, \"--\").concat(modifierValue_1));\n                            });\n                        }\n                        var blockKey = className.toLowerCase();\n                        var elementKey = capitalize(camelize(affected.toLowerCase()));\n                        var affectedElement = \"\".concat(blockKey).concat(elementKey);\n                        if (prepare[affectedElement]) {\n                            prepare[affectedElement].forEach(function (item) {\n                                prepare[affectedElement].push(\"\".concat(item, \"--\").concat(modifierValue_1));\n                            });\n                        }\n                    });\n                }\n            }\n        });\n    }\n    /**\n     * This will construct the element with the need typing\n     * Will also run over all the prepared values and add as a single string on the typed `result`\n     */\n    var result = {};\n    Object.keys(prepare).forEach(function (key) {\n        result[key] = prepare[key].join(\" \");\n    });\n    return result;\n};\n\nexport { useBemCss };\n//# sourceMappingURL=index.es.js.map\n",null,null,"import React from \"react\";\nimport { useBemCss } from \"use-bem-css\";\n\nconst App = () => {\n  const { button, buttonInput, buttonLabel, buttonSpan } = useBemCss({\n    className: \"button\",\n    blocks: [\"button\"],\n    elements: [\"label\", \"input\", \"span\"],\n  });\n\n  return (\n    <div className={button}>\n      <label className={buttonLabel}>\n        <span className={buttonSpan}>Label Text</span>\n        <button type=\"button\" className={buttonInput}>\n          Info\n        </button>\n      </label>\n    </div>\n  );\n};\nexport default App;\n",null,"import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}